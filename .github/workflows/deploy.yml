name: Deployment Pipeline
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/setup-pnpm/node_modules/.bin
          key: |
            node_modules-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Cache Turbo + Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm
            ${{ github.workspace }}/.turbo
            apps/admin/.next/cache
            apps/user/.next/cache
          key: build-cache-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            build-cache-

      - name: Install dependencies
        run: pnpm install --shamefully-hoist

      - name: Set up environment variables
        run: |
          # API
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "JWT_EXPIRY=${{ vars.JWT_EXPIRY }}" >> $GITHUB_ENV
          echo "COOKIE_EXPIRY=${{ vars.COOKIE_EXPIRY }}" >> $GITHUB_ENV
          echo "COOKIE_DOMAIN=${{ vars.COOKIE_DOMAIN }}" >> $GITHUB_ENV
          echo "SMTP_NAME=${{ vars.SMTP_NAME }}" >> $GITHUB_ENV
          echo "SMTP_MAIL=${{ vars.SMTP_MAIL }}" >> $GITHUB_ENV
          echo "SMTP_REPLY_TO=${{ vars.SMTP_REPLY_TO }}" >> $GITHUB_ENV
          echo "SMTP_HOST=${{ vars.SMTP_HOST }}" >> $GITHUB_ENV
          echo "SMTP_PORT=${{ vars.SMTP_PORT }}" >> $GITHUB_ENV
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> $GITHUB_ENV
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> $GITHUB_ENV
          echo "ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}" >> $GITHUB_ENV
          echo "WAREHOUSE_EMAIL=${{ vars.WAREHOUSE_EMAIL }}" >> $GITHUB_ENV

          # Cloudflare
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
          echo "CLOUDFLARE_DEFAULT_ACCOUNT_ID=${{ secrets.CLOUDFLARE_DEFAULT_ACCOUNT_ID }}" >> $GITHUB_ENV

      - name: Install Vercel CLI
        run: pnpm install -g vercel

      - name: Pull Vercel Admin App Environment Information
        run: |
          cd apps/admin
          vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}

      - name: Build Admin App
        run: |
          cd apps/admin
          vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Admin to Vercel
        run: |
          cd apps/admin
          vercel deploy \
            --prebuilt \
            --name baladi-admin \
            --prod \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ vars.VERCEL_ORG_ID }} \
            --build-env NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }} \
            --build-env NEXT_PUBLIC_USER_URL=${{ vars.NEXT_PUBLIC_USER_URL }} \
            --build-env NEXT_PUBLIC_ADMIN_URL=${{ vars.NEXT_PUBLIC_ADMIN_URL }} \
            --yes

      - name: Pull Vercel User App Environment Information
        run: |
          cd apps/user
          vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}

      - name: Build User App
        run: |
          cd apps/user
          vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy User to Vercel
        run: |
          cd apps/user
          vercel deploy \
            --prebuilt \
            --name baladi-user \
            --prod \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ vars.VERCEL_ORG_ID }} \
            --build-env NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }} \
            --build-env NEXT_PUBLIC_USER_URL=${{ vars.NEXT_PUBLIC_USER_URL }} \
            --build-env NEXT_PUBLIC_ADMIN_URL=${{ vars.NEXT_PUBLIC_ADMIN_URL }} \
            --yes

      - name: Deploy SST to AWS (API, Cron, S3 Storage)
        run: npx sst deploy --stage prod
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
